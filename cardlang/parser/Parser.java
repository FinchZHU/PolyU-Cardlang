/* This file was generated by SableCC (http://www.sablecc.org/). */

package cardlang.parser;

import cardlang.lexer.*;
import cardlang.node.*;
import cardlang.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AGame */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AScreen */
            {
                ArrayList<Object> list = new2();
                push(goTo(2), list, false);
            }
            break;
            case 3: /* reduce AValid */
            {
                ArrayList<Object> list = new3();
                push(goTo(3), list, false);
            }
            break;
            case 4: /* reduce ANextid */
            {
                ArrayList<Object> list = new4();
                push(goTo(4), list, false);
            }
            break;
            case 5: /* reduce AWinnerid */
            {
                ArrayList<Object> list = new5();
                push(goTo(5), list, false);
            }
            break;
            case 6: /* reduce AAstmtblock1Stmtblock */
            {
                ArrayList<Object> list = new6();
                push(goTo(6), list, false);
            }
            break;
            case 7: /* reduce AAstmtblock2Stmtblock */
            {
                ArrayList<Object> list = new7();
                push(goTo(6), list, false);
            }
            break;
            case 8: /* reduce AShuffleStmt */
            {
                ArrayList<Object> list = new8();
                push(goTo(7), list, false);
            }
            break;
            case 9: /* reduce AShiftStmt */
            {
                ArrayList<Object> list = new9();
                push(goTo(7), list, false);
            }
            break;
            case 10: /* reduce AForStmt */
            {
                ArrayList<Object> list = new10();
                push(goTo(7), list, false);
            }
            break;
            case 11: /* reduce AWhileStmt */
            {
                ArrayList<Object> list = new11();
                push(goTo(7), list, false);
            }
            break;
            case 12: /* reduce AIfStmt */
            {
                ArrayList<Object> list = new12();
                push(goTo(7), list, false);
            }
            break;
            case 13: /* reduce ABreakStmt */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list, false);
            }
            break;
            case 14: /* reduce AContinueStmt */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list, false);
            }
            break;
            case 15: /* reduce ABaseShift */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list, false);
            }
            break;
            case 16: /* reduce ARecurShift */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list, false);
            }
            break;
            case 17: /* reduce AFor */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list, false);
            }
            break;
            case 18: /* reduce AWhile */
            {
                ArrayList<Object> list = new18();
                push(goTo(10), list, false);
            }
            break;
            case 19: /* reduce ASingleIf */
            {
                ArrayList<Object> list = new19();
                push(goTo(11), list, false);
            }
            break;
            case 20: /* reduce AElseIf */
            {
                ArrayList<Object> list = new20();
                push(goTo(11), list, false);
            }
            break;
            case 21: /* reduce AElsestmtblock */
            {
                ArrayList<Object> list = new21();
                push(goTo(12), list, false);
            }
            break;
            case 22: /* reduce ABaseExpr */
            {
                ArrayList<Object> list = new22();
                push(goTo(13), list, false);
            }
            break;
            case 23: /* reduce AStringExpr */
            {
                ArrayList<Object> list = new23();
                push(goTo(13), list, false);
            }
            break;
            case 24: /* reduce AAndExpr */
            {
                ArrayList<Object> list = new24();
                push(goTo(13), list, false);
            }
            break;
            case 25: /* reduce AOrExpr */
            {
                ArrayList<Object> list = new25();
                push(goTo(13), list, false);
            }
            break;
            case 26: /* reduce ABaseFactor */
            {
                ArrayList<Object> list = new26();
                push(goTo(14), list, false);
            }
            break;
            case 27: /* reduce ANotFactor */
            {
                ArrayList<Object> list = new27();
                push(goTo(14), list, false);
            }
            break;
            case 28: /* reduce ABaseCompexpr */
            {
                ArrayList<Object> list = new28();
                push(goTo(15), list, false);
            }
            break;
            case 29: /* reduce ALargerCompexpr */
            {
                ArrayList<Object> list = new29();
                push(goTo(15), list, false);
            }
            break;
            case 30: /* reduce ALargerequalCompexpr */
            {
                ArrayList<Object> list = new30();
                push(goTo(15), list, false);
            }
            break;
            case 31: /* reduce ALessCompexpr */
            {
                ArrayList<Object> list = new31();
                push(goTo(15), list, false);
            }
            break;
            case 32: /* reduce ALessequalCompexpr */
            {
                ArrayList<Object> list = new32();
                push(goTo(15), list, false);
            }
            break;
            case 33: /* reduce AEqualCompexpr */
            {
                ArrayList<Object> list = new33();
                push(goTo(15), list, false);
            }
            break;
            case 34: /* reduce AInequalCompexpr */
            {
                ArrayList<Object> list = new34();
                push(goTo(15), list, false);
            }
            break;
            case 35: /* reduce ABaseNumexpr */
            {
                ArrayList<Object> list = new35();
                push(goTo(16), list, false);
            }
            break;
            case 36: /* reduce APlusNumexpr */
            {
                ArrayList<Object> list = new36();
                push(goTo(16), list, false);
            }
            break;
            case 37: /* reduce AMinusNumexpr */
            {
                ArrayList<Object> list = new37();
                push(goTo(16), list, false);
            }
            break;
            case 38: /* reduce AMultiNumexpr */
            {
                ArrayList<Object> list = new38();
                push(goTo(16), list, false);
            }
            break;
            case 39: /* reduce ADivNumexpr */
            {
                ArrayList<Object> list = new39();
                push(goTo(16), list, false);
            }
            break;
            case 40: /* reduce AModNumexpr */
            {
                ArrayList<Object> list = new40();
                push(goTo(16), list, false);
            }
            break;
            case 41: /* reduce AObjVal */
            {
                ArrayList<Object> list = new41();
                push(goTo(17), list, false);
            }
            break;
            case 42: /* reduce ANumVal */
            {
                ArrayList<Object> list = new42();
                push(goTo(17), list, false);
            }
            break;
            case 43: /* reduce ATrueVal */
            {
                ArrayList<Object> list = new43();
                push(goTo(17), list, false);
            }
            break;
            case 44: /* reduce AFalseVal */
            {
                ArrayList<Object> list = new44();
                push(goTo(17), list, false);
            }
            break;
            case 45: /* reduce AParenVal */
            {
                ArrayList<Object> list = new45();
                push(goTo(17), list, false);
            }
            break;
            case 46: /* reduce AIdObj */
            {
                ArrayList<Object> list = new46();
                push(goTo(18), list, false);
            }
            break;
            case 47: /* reduce AFieldObj */
            {
                ArrayList<Object> list = new47();
                push(goTo(18), list, false);
            }
            break;
            case 48: /* reduce ALitId */
            {
                ArrayList<Object> list = new48();
                push(goTo(19), list, false);
            }
            break;
            case 49: /* reduce AGameId */
            {
                ArrayList<Object> list = new49();
                push(goTo(19), list, false);
            }
            break;
            case 50: /* reduce AScreenId */
            {
                ArrayList<Object> list = new50();
                push(goTo(19), list, false);
            }
            break;
            case 51: /* reduce AValidId */
            {
                ArrayList<Object> list = new51();
                push(goTo(19), list, false);
            }
            break;
            case 52: /* reduce AWinneridId */
            {
                ArrayList<Object> list = new52();
                push(goTo(19), list, false);
            }
            break;
            case 53: /* reduce ANextidId */
            {
                ArrayList<Object> list = new53();
                push(goTo(19), list, false);
            }
            break;
            case 54: /* reduce ASubscriptId */
            {
                ArrayList<Object> list = new54();
                push(goTo(19), list, false);
            }
            break;
            case 55: /* reduce ALengthId */
            {
                ArrayList<Object> list = new55();
                push(goTo(19), list, false);
            }
            break;
            case 56: /* reduce ATerminal$Stmt */
            {
                ArrayList<Object> list = new56();
                push(goTo(20), list, true);
            }
            break;
            case 57: /* reduce ANonTerminal$Stmt */
            {
                ArrayList<Object> list = new57();
                push(goTo(20), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PGame pgameNode2;
        PScreen pscreenNode3;
        PValid pvalidNode4;
        PWinnerid pwinneridNode5;
        PNextid pnextidNode6;
        pgameNode2 = (PGame)nodeArrayList1.get(0);
        pscreenNode3 = (PScreen)nodeArrayList2.get(0);
        pvalidNode4 = (PValid)nodeArrayList3.get(0);
        pwinneridNode5 = (PWinnerid)nodeArrayList4.get(0);
        pnextidNode6 = (PNextid)nodeArrayList5.get(0);

        pprogramNode1 = new AProgram(pgameNode2, pscreenNode3, pvalidNode4, pwinneridNode5, pnextidNode6);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AGame */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGame pgameNode1;
        {
            // Block
        TKwgame tkwgameNode2;
        TLiteral tliteralNode3;
        PStmtblock pstmtblockNode4;
        tkwgameNode2 = (TKwgame)nodeArrayList1.get(0);
        tliteralNode3 = (TLiteral)nodeArrayList2.get(0);
        pstmtblockNode4 = (PStmtblock)nodeArrayList3.get(0);

        pgameNode1 = new AGame(tkwgameNode2, tliteralNode3, pstmtblockNode4);
        }
	nodeList.add(pgameNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AScreen */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PScreen pscreenNode1;
        {
            // Block
        TKwscreen tkwscreenNode2;
        PStmtblock pstmtblockNode3;
        tkwscreenNode2 = (TKwscreen)nodeArrayList1.get(0);
        pstmtblockNode3 = (PStmtblock)nodeArrayList2.get(0);

        pscreenNode1 = new AScreen(tkwscreenNode2, pstmtblockNode3);
        }
	nodeList.add(pscreenNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AValid */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValid pvalidNode1;
        {
            // Block
        TKwvalid tkwvalidNode2;
        PStmtblock pstmtblockNode3;
        tkwvalidNode2 = (TKwvalid)nodeArrayList1.get(0);
        pstmtblockNode3 = (PStmtblock)nodeArrayList2.get(0);

        pvalidNode1 = new AValid(tkwvalidNode2, pstmtblockNode3);
        }
	nodeList.add(pvalidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ANextid */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNextid pnextidNode1;
        {
            // Block
        TKwnextid tkwnextidNode2;
        PStmtblock pstmtblockNode3;
        tkwnextidNode2 = (TKwnextid)nodeArrayList1.get(0);
        pstmtblockNode3 = (PStmtblock)nodeArrayList2.get(0);

        pnextidNode1 = new ANextid(tkwnextidNode2, pstmtblockNode3);
        }
	nodeList.add(pnextidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AWinnerid */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWinnerid pwinneridNode1;
        {
            // Block
        TKwwinnerid tkwwinneridNode2;
        PStmtblock pstmtblockNode3;
        tkwwinneridNode2 = (TKwwinnerid)nodeArrayList1.get(0);
        pstmtblockNode3 = (PStmtblock)nodeArrayList2.get(0);

        pwinneridNode1 = new AWinnerid(tkwwinneridNode2, pstmtblockNode3);
        }
	nodeList.add(pwinneridNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAstmtblock1Stmtblock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtblock pstmtblockNode1;
        {
            // Block
        TLeftbrace tleftbraceNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TRightbrace trightbraceNode4;
        tleftbraceNode2 = (TLeftbrace)nodeArrayList1.get(0);
        {
            // Block
        }
        trightbraceNode4 = (TRightbrace)nodeArrayList2.get(0);

        pstmtblockNode1 = new AStmtblock(tleftbraceNode2, listNode3, trightbraceNode4);
        }
	nodeList.add(pstmtblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAstmtblock2Stmtblock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtblock pstmtblockNode1;
        {
            // Block
        TLeftbrace tleftbraceNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TRightbrace trightbraceNode5;
        tleftbraceNode2 = (TLeftbrace)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        trightbraceNode5 = (TRightbrace)nodeArrayList3.get(0);

        pstmtblockNode1 = new AStmtblock(tleftbraceNode2, listNode4, trightbraceNode5);
        }
	nodeList.add(pstmtblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AShuffleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TKwshuffle tkwshuffleNode2;
        tkwshuffleNode2 = (TKwshuffle)nodeArrayList1.get(0);

        pstmtNode1 = new AShuffleStmt(tkwshuffleNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AShiftStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PShift pshiftNode2;
        pshiftNode2 = (PShift)nodeArrayList1.get(0);

        pstmtNode1 = new AShiftStmt(pshiftNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AForStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PFor pforNode2;
        pforNode2 = (PFor)nodeArrayList1.get(0);

        pstmtNode1 = new AForStmt(pforNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AWhileStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PWhile pwhileNode2;
        pwhileNode2 = (PWhile)nodeArrayList1.get(0);

        pstmtNode1 = new AWhileStmt(pwhileNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AIfStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PIf pifNode2;
        pifNode2 = (PIf)nodeArrayList1.get(0);

        pstmtNode1 = new AIfStmt(pifNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ABreakStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TKwbreak tkwbreakNode2;
        tkwbreakNode2 = (TKwbreak)nodeArrayList1.get(0);

        pstmtNode1 = new ABreakStmt(tkwbreakNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AContinueStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TKwcontinue tkwcontinueNode2;
        tkwcontinueNode2 = (TKwcontinue)nodeArrayList1.get(0);

        pstmtNode1 = new AContinueStmt(tkwcontinueNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ABaseShift */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PShift pshiftNode1;
        {
            // Block
        PObj pobjNode2;
        TOptshift toptshiftNode3;
        PExpr pexprNode4;
        pobjNode2 = (PObj)nodeArrayList1.get(0);
        toptshiftNode3 = (TOptshift)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pshiftNode1 = new ABaseShift(pobjNode2, toptshiftNode3, pexprNode4);
        }
	nodeList.add(pshiftNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ARecurShift */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PShift pshiftNode1;
        {
            // Block
        PShift pshiftNode2;
        TOptshift toptshiftNode3;
        PExpr pexprNode4;
        pshiftNode2 = (PShift)nodeArrayList1.get(0);
        toptshiftNode3 = (TOptshift)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);

        pshiftNode1 = new ARecurShift(pshiftNode2, toptshiftNode3, pexprNode4);
        }
	nodeList.add(pshiftNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AFor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFor pforNode1;
        {
            // Block
        TKwfor tkwforNode2;
        PId pidNode3;
        TKwfrom tkwfromNode4;
        PExpr pexprNode5;
        TKwto tkwtoNode6;
        PExpr pexprNode7;
        PStmtblock pstmtblockNode8;
        tkwforNode2 = (TKwfor)nodeArrayList1.get(0);
        pidNode3 = (PId)nodeArrayList2.get(0);
        tkwfromNode4 = (TKwfrom)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);
        tkwtoNode6 = (TKwto)nodeArrayList5.get(0);
        pexprNode7 = (PExpr)nodeArrayList6.get(0);
        pstmtblockNode8 = (PStmtblock)nodeArrayList7.get(0);

        pforNode1 = new AFor(tkwforNode2, pidNode3, tkwfromNode4, pexprNode5, tkwtoNode6, pexprNode7, pstmtblockNode8);
        }
	nodeList.add(pforNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AWhile */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWhile pwhileNode1;
        {
            // Block
        TKwwhile tkwwhileNode2;
        PExpr pexprNode3;
        PStmtblock pstmtblockNode4;
        tkwwhileNode2 = (TKwwhile)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        pstmtblockNode4 = (PStmtblock)nodeArrayList3.get(0);

        pwhileNode1 = new AWhile(tkwwhileNode2, pexprNode3, pstmtblockNode4);
        }
	nodeList.add(pwhileNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ASingleIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIf pifNode1;
        {
            // Block
        TKwif tkwifNode2;
        PExpr pexprNode3;
        TKwthen tkwthenNode4;
        PStmtblock pstmtblockNode5;
        tkwifNode2 = (TKwif)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tkwthenNode4 = (TKwthen)nodeArrayList3.get(0);
        pstmtblockNode5 = (PStmtblock)nodeArrayList4.get(0);

        pifNode1 = new ASingleIf(tkwifNode2, pexprNode3, tkwthenNode4, pstmtblockNode5);
        }
	nodeList.add(pifNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AElseIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIf pifNode1;
        {
            // Block
        TKwif tkwifNode2;
        PExpr pexprNode3;
        TKwthen tkwthenNode4;
        PStmtblock pstmtblockNode5;
        TKwelse tkwelseNode6;
        PElsestmtblock pelsestmtblockNode7;
        tkwifNode2 = (TKwif)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tkwthenNode4 = (TKwthen)nodeArrayList3.get(0);
        pstmtblockNode5 = (PStmtblock)nodeArrayList4.get(0);
        tkwelseNode6 = (TKwelse)nodeArrayList5.get(0);
        pelsestmtblockNode7 = (PElsestmtblock)nodeArrayList6.get(0);

        pifNode1 = new AElseIf(tkwifNode2, pexprNode3, tkwthenNode4, pstmtblockNode5, tkwelseNode6, pelsestmtblockNode7);
        }
	nodeList.add(pifNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AElsestmtblock */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PElsestmtblock pelsestmtblockNode1;
        {
            // Block
        PStmtblock pstmtblockNode2;
        pstmtblockNode2 = (PStmtblock)nodeArrayList1.get(0);

        pelsestmtblockNode1 = new AElsestmtblock(pstmtblockNode2);
        }
	nodeList.add(pelsestmtblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ABaseExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        pexprNode1 = new ABaseExpr(pfactorNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AStringExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pexprNode1 = new AStringExpr(tstringNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAndExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TKwand tkwandNode3;
        PFactor pfactorNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tkwandNode3 = (TKwand)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        pexprNode1 = new AAndExpr(pexprNode2, tkwandNode3, pfactorNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AOrExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TKwor tkworNode3;
        PFactor pfactorNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tkworNode3 = (TKwor)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        pexprNode1 = new AOrExpr(pexprNode2, tkworNode3, pfactorNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ABaseFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PCompexpr pcompexprNode2;
        pcompexprNode2 = (PCompexpr)nodeArrayList1.get(0);

        pfactorNode1 = new ABaseFactor(pcompexprNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ANotFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TKwnot tkwnotNode2;
        PCompexpr pcompexprNode3;
        tkwnotNode2 = (TKwnot)nodeArrayList1.get(0);
        pcompexprNode3 = (PCompexpr)nodeArrayList2.get(0);

        pfactorNode1 = new ANotFactor(tkwnotNode2, pcompexprNode3);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ABaseCompexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompexpr pcompexprNode1;
        {
            // Block
        PNumexpr pnumexprNode2;
        pnumexprNode2 = (PNumexpr)nodeArrayList1.get(0);

        pcompexprNode1 = new ABaseCompexpr(pnumexprNode2);
        }
	nodeList.add(pcompexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ALargerCompexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompexpr pcompexprNode1;
        {
            // Block
        PNumexpr pnumexprNode2;
        TOptlarger toptlargerNode3;
        PNumexpr pnumexprNode4;
        pnumexprNode2 = (PNumexpr)nodeArrayList1.get(0);
        toptlargerNode3 = (TOptlarger)nodeArrayList2.get(0);
        pnumexprNode4 = (PNumexpr)nodeArrayList3.get(0);

        pcompexprNode1 = new ALargerCompexpr(pnumexprNode2, toptlargerNode3, pnumexprNode4);
        }
	nodeList.add(pcompexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ALargerequalCompexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompexpr pcompexprNode1;
        {
            // Block
        PNumexpr pnumexprNode2;
        TOptlargerequal toptlargerequalNode3;
        PNumexpr pnumexprNode4;
        pnumexprNode2 = (PNumexpr)nodeArrayList1.get(0);
        toptlargerequalNode3 = (TOptlargerequal)nodeArrayList2.get(0);
        pnumexprNode4 = (PNumexpr)nodeArrayList3.get(0);

        pcompexprNode1 = new ALargerequalCompexpr(pnumexprNode2, toptlargerequalNode3, pnumexprNode4);
        }
	nodeList.add(pcompexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ALessCompexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompexpr pcompexprNode1;
        {
            // Block
        PNumexpr pnumexprNode2;
        TOptless toptlessNode3;
        PNumexpr pnumexprNode4;
        pnumexprNode2 = (PNumexpr)nodeArrayList1.get(0);
        toptlessNode3 = (TOptless)nodeArrayList2.get(0);
        pnumexprNode4 = (PNumexpr)nodeArrayList3.get(0);

        pcompexprNode1 = new ALessCompexpr(pnumexprNode2, toptlessNode3, pnumexprNode4);
        }
	nodeList.add(pcompexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ALessequalCompexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompexpr pcompexprNode1;
        {
            // Block
        PNumexpr pnumexprNode2;
        TOptlessequal toptlessequalNode3;
        PNumexpr pnumexprNode4;
        pnumexprNode2 = (PNumexpr)nodeArrayList1.get(0);
        toptlessequalNode3 = (TOptlessequal)nodeArrayList2.get(0);
        pnumexprNode4 = (PNumexpr)nodeArrayList3.get(0);

        pcompexprNode1 = new ALessequalCompexpr(pnumexprNode2, toptlessequalNode3, pnumexprNode4);
        }
	nodeList.add(pcompexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AEqualCompexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompexpr pcompexprNode1;
        {
            // Block
        PNumexpr pnumexprNode2;
        TOptequal toptequalNode3;
        PNumexpr pnumexprNode4;
        pnumexprNode2 = (PNumexpr)nodeArrayList1.get(0);
        toptequalNode3 = (TOptequal)nodeArrayList2.get(0);
        pnumexprNode4 = (PNumexpr)nodeArrayList3.get(0);

        pcompexprNode1 = new AEqualCompexpr(pnumexprNode2, toptequalNode3, pnumexprNode4);
        }
	nodeList.add(pcompexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AInequalCompexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCompexpr pcompexprNode1;
        {
            // Block
        PNumexpr pnumexprNode2;
        TOptinequal toptinequalNode3;
        PNumexpr pnumexprNode4;
        pnumexprNode2 = (PNumexpr)nodeArrayList1.get(0);
        toptinequalNode3 = (TOptinequal)nodeArrayList2.get(0);
        pnumexprNode4 = (PNumexpr)nodeArrayList3.get(0);

        pcompexprNode1 = new AInequalCompexpr(pnumexprNode2, toptinequalNode3, pnumexprNode4);
        }
	nodeList.add(pcompexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ABaseNumexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNumexpr pnumexprNode1;
        {
            // Block
        PVal pvalNode2;
        pvalNode2 = (PVal)nodeArrayList1.get(0);

        pnumexprNode1 = new ABaseNumexpr(pvalNode2);
        }
	nodeList.add(pnumexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce APlusNumexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNumexpr pnumexprNode1;
        {
            // Block
        PNumexpr pnumexprNode2;
        TOptplus toptplusNode3;
        PVal pvalNode4;
        pnumexprNode2 = (PNumexpr)nodeArrayList1.get(0);
        toptplusNode3 = (TOptplus)nodeArrayList2.get(0);
        pvalNode4 = (PVal)nodeArrayList3.get(0);

        pnumexprNode1 = new APlusNumexpr(pnumexprNode2, toptplusNode3, pvalNode4);
        }
	nodeList.add(pnumexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AMinusNumexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNumexpr pnumexprNode1;
        {
            // Block
        PNumexpr pnumexprNode2;
        TOptminus toptminusNode3;
        PVal pvalNode4;
        pnumexprNode2 = (PNumexpr)nodeArrayList1.get(0);
        toptminusNode3 = (TOptminus)nodeArrayList2.get(0);
        pvalNode4 = (PVal)nodeArrayList3.get(0);

        pnumexprNode1 = new AMinusNumexpr(pnumexprNode2, toptminusNode3, pvalNode4);
        }
	nodeList.add(pnumexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AMultiNumexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNumexpr pnumexprNode1;
        {
            // Block
        PNumexpr pnumexprNode2;
        TOptmulti toptmultiNode3;
        PVal pvalNode4;
        pnumexprNode2 = (PNumexpr)nodeArrayList1.get(0);
        toptmultiNode3 = (TOptmulti)nodeArrayList2.get(0);
        pvalNode4 = (PVal)nodeArrayList3.get(0);

        pnumexprNode1 = new AMultiNumexpr(pnumexprNode2, toptmultiNode3, pvalNode4);
        }
	nodeList.add(pnumexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ADivNumexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNumexpr pnumexprNode1;
        {
            // Block
        PNumexpr pnumexprNode2;
        TOptdiv toptdivNode3;
        PVal pvalNode4;
        pnumexprNode2 = (PNumexpr)nodeArrayList1.get(0);
        toptdivNode3 = (TOptdiv)nodeArrayList2.get(0);
        pvalNode4 = (PVal)nodeArrayList3.get(0);

        pnumexprNode1 = new ADivNumexpr(pnumexprNode2, toptdivNode3, pvalNode4);
        }
	nodeList.add(pnumexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AModNumexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNumexpr pnumexprNode1;
        {
            // Block
        PNumexpr pnumexprNode2;
        TOptmod toptmodNode3;
        PVal pvalNode4;
        pnumexprNode2 = (PNumexpr)nodeArrayList1.get(0);
        toptmodNode3 = (TOptmod)nodeArrayList2.get(0);
        pvalNode4 = (PVal)nodeArrayList3.get(0);

        pnumexprNode1 = new AModNumexpr(pnumexprNode2, toptmodNode3, pvalNode4);
        }
	nodeList.add(pnumexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AObjVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        PObj pobjNode2;
        pobjNode2 = (PObj)nodeArrayList1.get(0);

        pvalNode1 = new AObjVal(pobjNode2);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ANumVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        TNumeral tnumeralNode2;
        tnumeralNode2 = (TNumeral)nodeArrayList1.get(0);

        pvalNode1 = new ANumVal(tnumeralNode2);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ATrueVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        TKwtrue tkwtrueNode2;
        tkwtrueNode2 = (TKwtrue)nodeArrayList1.get(0);

        pvalNode1 = new ATrueVal(tkwtrueNode2);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AFalseVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        TKwfalse tkwfalseNode2;
        tkwfalseNode2 = (TKwfalse)nodeArrayList1.get(0);

        pvalNode1 = new AFalseVal(tkwfalseNode2);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AParenVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVal pvalNode1;
        {
            // Block
        TLeftparen tleftparenNode2;
        PExpr pexprNode3;
        TRightparen trightparenNode4;
        tleftparenNode2 = (TLeftparen)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trightparenNode4 = (TRightparen)nodeArrayList3.get(0);

        pvalNode1 = new AParenVal(tleftparenNode2, pexprNode3, trightparenNode4);
        }
	nodeList.add(pvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AIdObj */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PObj pobjNode1;
        {
            // Block
        PId pidNode2;
        pidNode2 = (PId)nodeArrayList1.get(0);

        pobjNode1 = new AIdObj(pidNode2);
        }
	nodeList.add(pobjNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AFieldObj */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PObj pobjNode1;
        {
            // Block
        PId pidNode2;
        TPoint tpointNode3;
        PObj pobjNode4;
        pidNode2 = (PId)nodeArrayList1.get(0);
        tpointNode3 = (TPoint)nodeArrayList2.get(0);
        pobjNode4 = (PObj)nodeArrayList3.get(0);

        pobjNode1 = new AFieldObj(pidNode2, tpointNode3, pobjNode4);
        }
	nodeList.add(pobjNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ALitId */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PId pidNode1;
        {
            // Block
        TLiteral tliteralNode2;
        tliteralNode2 = (TLiteral)nodeArrayList1.get(0);

        pidNode1 = new ALitId(tliteralNode2);
        }
	nodeList.add(pidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AGameId */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PId pidNode1;
        {
            // Block
        TKwgame tkwgameNode2;
        tkwgameNode2 = (TKwgame)nodeArrayList1.get(0);

        pidNode1 = new AGameId(tkwgameNode2);
        }
	nodeList.add(pidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AScreenId */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PId pidNode1;
        {
            // Block
        TKwscreen tkwscreenNode2;
        tkwscreenNode2 = (TKwscreen)nodeArrayList1.get(0);

        pidNode1 = new AScreenId(tkwscreenNode2);
        }
	nodeList.add(pidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AValidId */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PId pidNode1;
        {
            // Block
        TKwvalid tkwvalidNode2;
        tkwvalidNode2 = (TKwvalid)nodeArrayList1.get(0);

        pidNode1 = new AValidId(tkwvalidNode2);
        }
	nodeList.add(pidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AWinneridId */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PId pidNode1;
        {
            // Block
        TKwwinnerid tkwwinneridNode2;
        tkwwinneridNode2 = (TKwwinnerid)nodeArrayList1.get(0);

        pidNode1 = new AWinneridId(tkwwinneridNode2);
        }
	nodeList.add(pidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ANextidId */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PId pidNode1;
        {
            // Block
        TKwnextid tkwnextidNode2;
        tkwnextidNode2 = (TKwnextid)nodeArrayList1.get(0);

        pidNode1 = new ANextidId(tkwnextidNode2);
        }
	nodeList.add(pidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ASubscriptId */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PId pidNode1;
        {
            // Block
        PId pidNode2;
        TLeftsqr tleftsqrNode3;
        PExpr pexprNode4;
        TRightsqr trightsqrNode5;
        pidNode2 = (PId)nodeArrayList1.get(0);
        tleftsqrNode3 = (TLeftsqr)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trightsqrNode5 = (TRightsqr)nodeArrayList4.get(0);

        pidNode1 = new ASubscriptId(pidNode2, tleftsqrNode3, pexprNode4, trightsqrNode5);
        }
	nodeList.add(pidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ALengthId */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PId pidNode1;
        {
            // Block
        TLine tlineNode2;
        PObj pobjNode3;
        TLine tlineNode4;
        tlineNode2 = (TLine)nodeArrayList1.get(0);
        pobjNode3 = (PObj)nodeArrayList2.get(0);
        tlineNode4 = (TLine)nodeArrayList3.get(0);

        pidNode1 = new ALengthId(tlineNode2, pobjNode3, tlineNode4);
        }
	nodeList.add(pidNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ATerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode1 != null)
	{
	  listNode2.add(pstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ANonTerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStmt pstmtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmtNode2 != null)
	{
	  listNode3.add(pstmtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {40, SHIFT, 4}, },
			{{-1, ERROR, 2}, {43, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {1, SHIFT, 5}, },
			{{-1, ERROR, 4}, {20, SHIFT, 7}, },
			{{-1, ERROR, 5}, {20, SHIFT, 7}, },
			{{-1, ERROR, 6}, {2, SHIFT, 10}, },
			{{-1, ERROR, 7}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {5, SHIFT, 17}, {6, SHIFT, 18}, {9, SHIFT, 19}, {10, SHIFT, 20}, {11, SHIFT, 21}, {12, SHIFT, 22}, {21, SHIFT, 23}, {27, SHIFT, 24}, {40, SHIFT, 25}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 10}, {20, SHIFT, 7}, },
			{{-1, ERROR, 11}, {4, SHIFT, 35}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 18}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {27, SHIFT, 24}, {40, SHIFT, 25}, },
			{{-1, ERROR, 19}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {15, SHIFT, 38}, {16, SHIFT, 39}, {17, SHIFT, 40}, {22, SHIFT, 41}, {27, SHIFT, 24}, {40, SHIFT, 25}, {41, SHIFT, 42}, {42, SHIFT, 43}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 22}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {15, SHIFT, 38}, {16, SHIFT, 39}, {17, SHIFT, 40}, {22, SHIFT, 41}, {27, SHIFT, 24}, {40, SHIFT, 25}, {41, SHIFT, 42}, {42, SHIFT, 43}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 24}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {27, SHIFT, 24}, {40, SHIFT, 25}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 9}, {28, SHIFT, 52}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 31}, {28, SHIFT, 53}, },
			{{-1, REDUCE, 46}, {24, SHIFT, 54}, {25, SHIFT, 55}, },
			{{-1, ERROR, 33}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {5, SHIFT, 17}, {6, SHIFT, 18}, {9, SHIFT, 19}, {10, SHIFT, 20}, {11, SHIFT, 21}, {12, SHIFT, 22}, {21, SHIFT, 56}, {27, SHIFT, 24}, {40, SHIFT, 25}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 35}, {20, SHIFT, 7}, },
			{{-1, ERROR, 36}, {3, SHIFT, 59}, },
			{{-1, ERROR, 37}, {7, SHIFT, 61}, {25, SHIFT, 55}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 40}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {15, SHIFT, 38}, {16, SHIFT, 39}, {22, SHIFT, 41}, {27, SHIFT, 24}, {40, SHIFT, 25}, {41, SHIFT, 42}, },
			{{-1, ERROR, 41}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {15, SHIFT, 38}, {16, SHIFT, 39}, {17, SHIFT, 40}, {22, SHIFT, 41}, {27, SHIFT, 24}, {40, SHIFT, 25}, {41, SHIFT, 42}, {42, SHIFT, 43}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 44}, {18, SHIFT, 64}, {19, SHIFT, 65}, {20, SHIFT, 7}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 28}, {29, SHIFT, 67}, {30, SHIFT, 68}, {31, SHIFT, 69}, {32, SHIFT, 70}, {33, SHIFT, 71}, {34, SHIFT, 72}, {35, SHIFT, 73}, {36, SHIFT, 74}, {37, SHIFT, 75}, {38, SHIFT, 76}, {39, SHIFT, 77}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 50}, {13, SHIFT, 78}, {18, SHIFT, 64}, {19, SHIFT, 65}, },
			{{-1, ERROR, 51}, {27, SHIFT, 79}, },
			{{-1, ERROR, 52}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {15, SHIFT, 38}, {16, SHIFT, 39}, {17, SHIFT, 40}, {22, SHIFT, 41}, {27, SHIFT, 24}, {40, SHIFT, 25}, {41, SHIFT, 42}, {42, SHIFT, 43}, },
			{{-1, ERROR, 53}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {15, SHIFT, 38}, {16, SHIFT, 39}, {17, SHIFT, 40}, {22, SHIFT, 41}, {27, SHIFT, 24}, {40, SHIFT, 25}, {41, SHIFT, 42}, {42, SHIFT, 43}, },
			{{-1, ERROR, 54}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {27, SHIFT, 24}, {40, SHIFT, 25}, },
			{{-1, ERROR, 55}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {15, SHIFT, 38}, {16, SHIFT, 39}, {17, SHIFT, 40}, {22, SHIFT, 41}, {27, SHIFT, 24}, {40, SHIFT, 25}, {41, SHIFT, 42}, {42, SHIFT, 43}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 59}, {20, SHIFT, 7}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 61}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {15, SHIFT, 38}, {16, SHIFT, 39}, {17, SHIFT, 40}, {22, SHIFT, 41}, {27, SHIFT, 24}, {40, SHIFT, 25}, {41, SHIFT, 42}, {42, SHIFT, 43}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 63}, {18, SHIFT, 64}, {19, SHIFT, 65}, {23, SHIFT, 86}, },
			{{-1, ERROR, 64}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {15, SHIFT, 38}, {16, SHIFT, 39}, {17, SHIFT, 40}, {22, SHIFT, 41}, {27, SHIFT, 24}, {40, SHIFT, 25}, {41, SHIFT, 42}, },
			{{-1, ERROR, 65}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {15, SHIFT, 38}, {16, SHIFT, 39}, {17, SHIFT, 40}, {22, SHIFT, 41}, {27, SHIFT, 24}, {40, SHIFT, 25}, {41, SHIFT, 42}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 67}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {15, SHIFT, 38}, {16, SHIFT, 39}, {22, SHIFT, 41}, {27, SHIFT, 24}, {40, SHIFT, 25}, {41, SHIFT, 42}, },
			{{-1, ERROR, 68}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {15, SHIFT, 38}, {16, SHIFT, 39}, {22, SHIFT, 41}, {27, SHIFT, 24}, {40, SHIFT, 25}, {41, SHIFT, 42}, },
			{{-1, ERROR, 69}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {15, SHIFT, 38}, {16, SHIFT, 39}, {22, SHIFT, 41}, {27, SHIFT, 24}, {40, SHIFT, 25}, {41, SHIFT, 42}, },
			{{-1, ERROR, 70}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {15, SHIFT, 38}, {16, SHIFT, 39}, {22, SHIFT, 41}, {27, SHIFT, 24}, {40, SHIFT, 25}, {41, SHIFT, 42}, },
			{{-1, ERROR, 71}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {15, SHIFT, 38}, {16, SHIFT, 39}, {22, SHIFT, 41}, {27, SHIFT, 24}, {40, SHIFT, 25}, {41, SHIFT, 42}, },
			{{-1, ERROR, 72}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {15, SHIFT, 38}, {16, SHIFT, 39}, {22, SHIFT, 41}, {27, SHIFT, 24}, {40, SHIFT, 25}, {41, SHIFT, 42}, },
			{{-1, ERROR, 73}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {15, SHIFT, 38}, {16, SHIFT, 39}, {22, SHIFT, 41}, {27, SHIFT, 24}, {40, SHIFT, 25}, {41, SHIFT, 42}, },
			{{-1, ERROR, 74}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {15, SHIFT, 38}, {16, SHIFT, 39}, {22, SHIFT, 41}, {27, SHIFT, 24}, {40, SHIFT, 25}, {41, SHIFT, 42}, },
			{{-1, ERROR, 75}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {15, SHIFT, 38}, {16, SHIFT, 39}, {22, SHIFT, 41}, {27, SHIFT, 24}, {40, SHIFT, 25}, {41, SHIFT, 42}, },
			{{-1, ERROR, 76}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {15, SHIFT, 38}, {16, SHIFT, 39}, {22, SHIFT, 41}, {27, SHIFT, 24}, {40, SHIFT, 25}, {41, SHIFT, 42}, },
			{{-1, ERROR, 77}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {15, SHIFT, 38}, {16, SHIFT, 39}, {22, SHIFT, 41}, {27, SHIFT, 24}, {40, SHIFT, 25}, {41, SHIFT, 42}, },
			{{-1, ERROR, 78}, {20, SHIFT, 7}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 16}, {18, SHIFT, 64}, {19, SHIFT, 65}, },
			{{-1, REDUCE, 15}, {18, SHIFT, 64}, {19, SHIFT, 65}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 83}, {18, SHIFT, 64}, {19, SHIFT, 65}, {26, SHIFT, 101}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 85}, {8, SHIFT, 102}, {18, SHIFT, 64}, {19, SHIFT, 65}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 30}, {35, SHIFT, 73}, {36, SHIFT, 74}, {37, SHIFT, 75}, {38, SHIFT, 76}, {39, SHIFT, 77}, },
			{{-1, REDUCE, 32}, {35, SHIFT, 73}, {36, SHIFT, 74}, {37, SHIFT, 75}, {38, SHIFT, 76}, {39, SHIFT, 77}, },
			{{-1, REDUCE, 34}, {35, SHIFT, 73}, {36, SHIFT, 74}, {37, SHIFT, 75}, {38, SHIFT, 76}, {39, SHIFT, 77}, },
			{{-1, REDUCE, 29}, {35, SHIFT, 73}, {36, SHIFT, 74}, {37, SHIFT, 75}, {38, SHIFT, 76}, {39, SHIFT, 77}, },
			{{-1, REDUCE, 31}, {35, SHIFT, 73}, {36, SHIFT, 74}, {37, SHIFT, 75}, {38, SHIFT, 76}, {39, SHIFT, 77}, },
			{{-1, REDUCE, 33}, {35, SHIFT, 73}, {36, SHIFT, 74}, {37, SHIFT, 75}, {38, SHIFT, 76}, {39, SHIFT, 77}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 19}, {14, SHIFT, 103}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 102}, {0, SHIFT, 12}, {1, SHIFT, 13}, {2, SHIFT, 14}, {3, SHIFT, 15}, {4, SHIFT, 16}, {15, SHIFT, 38}, {16, SHIFT, 39}, {17, SHIFT, 40}, {22, SHIFT, 41}, {27, SHIFT, 24}, {40, SHIFT, 25}, {41, SHIFT, 42}, {42, SHIFT, 43}, },
			{{-1, ERROR, 103}, {20, SHIFT, 7}, },
			{{-1, ERROR, 104}, {18, SHIFT, 64}, {19, SHIFT, 65}, {20, SHIFT, 7}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 17}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 6}, },
			{{-1, 11}, },
			{{-1, 60}, },
			{{-1, 36}, },
			{{-1, 8}, {5, 9}, {10, 34}, {35, 58}, {44, 66}, {59, 84}, {78, 100}, {103, 105}, {104, 107}, },
			{{-1, 26}, {33, 57}, },
			{{-1, 27}, },
			{{-1, 28}, },
			{{-1, 29}, },
			{{-1, 30}, },
			{{-1, 106}, },
			{{-1, 44}, {22, 50}, {41, 63}, {52, 80}, {53, 81}, {55, 83}, {61, 85}, {102, 104}, },
			{{-1, 45}, {64, 87}, {65, 88}, },
			{{-1, 46}, {40, 62}, },
			{{-1, 47}, {67, 89}, {68, 90}, {69, 91}, {70, 92}, {71, 93}, {72, 94}, },
			{{-1, 48}, {73, 95}, {74, 96}, {75, 97}, {76, 98}, {77, 99}, },
			{{-1, 49}, {7, 31}, {24, 51}, {33, 31}, {54, 82}, },
			{{-1, 32}, {18, 37}, },
			{{-1, 33}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'Game'",
			"expecting: literal",
			"expecting: EOF",
			"expecting: 'Screen'",
			"expecting: '{'",
			"expecting: 'Valid'",
			"expecting: 'Game', 'Screen', 'Valid', 'NextID', 'WinnerID', 'Shuffle', 'For', 'While', 'Break', 'Continue', 'If', '}', '|', literal",
			"expecting: 'WinnerID'",
			"expecting: 'Game', 'Screen', 'Valid', 'NextID', 'WinnerID', 'Shuffle', 'For', 'From', 'To', 'While', 'Break', 'Continue', 'If', 'Then', 'And', 'Or', '{', '}', ')', '.', '[', ']', '|', '<<', '>=', '<=', '<>', '>', '<', '=', '+', '-', '*', '/', '%', literal",
			"expecting: 'Game', 'Screen', 'Valid', 'NextID', 'WinnerID', '|', literal",
			"expecting: 'Game', 'Screen', 'Valid', 'NextID', 'WinnerID', 'True', 'False', 'Not', '(', '|', literal, numeral, string",
			"expecting: 'Game', 'Screen', 'Valid', 'NextID', 'WinnerID', 'Shuffle', 'For', 'While', 'Break', 'Continue', 'If', 'Else', '}', '|', literal, EOF",
			"expecting: 'Game', 'Screen', 'Valid', 'NextID', 'WinnerID', 'Shuffle', 'For', 'While', 'Break', 'Continue', 'If', '}', '|', '<<', literal",
			"expecting: '<<'",
			"expecting: 'Game', 'Screen', 'Valid', 'NextID', 'WinnerID', 'Shuffle', 'For', 'To', 'While', 'Break', 'Continue', 'If', 'Then', 'And', 'Or', '{', '}', ')', '.', '[', ']', '|', '<<', '>=', '<=', '<>', '>', '<', '=', '+', '-', '*', '/', '%', literal",
			"expecting: 'NextID'",
			"expecting: 'From', '['",
			"expecting: 'Game', 'Screen', 'Valid', 'NextID', 'WinnerID', 'Shuffle', 'For', 'To', 'While', 'Break', 'Continue', 'If', 'Then', 'And', 'Or', '{', '}', ')', ']', '|', '<<', '>=', '<=', '<>', '>', '<', '=', '+', '-', '*', '/', '%', literal",
			"expecting: 'Game', 'Screen', 'Valid', 'NextID', 'WinnerID', 'True', 'False', '(', '|', literal, numeral",
			"expecting: 'Game', 'Screen', 'Valid', 'NextID', 'WinnerID', 'Shuffle', 'For', 'To', 'While', 'Break', 'Continue', 'If', 'Then', 'And', 'Or', '{', '}', ')', ']', '|', '<<', literal",
			"expecting: 'And', 'Or', '{'",
			"expecting: 'Then', 'And', 'Or'",
			"expecting: '|'",
			"expecting: 'And', 'Or', ')'",
			"expecting: 'Game', 'Screen', 'Valid', 'NextID', 'WinnerID', 'True', 'False', 'Not', '(', '|', literal, numeral",
			"expecting: 'Game', 'Screen', 'Valid', 'NextID', 'WinnerID', 'Shuffle', 'For', 'While', 'Break', 'Continue', 'If', 'And', 'Or', '}', '|', '<<', literal",
			"expecting: 'And', 'Or', ']'",
			"expecting: 'To', 'And', 'Or'",
			"expecting: 'Game', 'Screen', 'Valid', 'NextID', 'WinnerID', 'Shuffle', 'For', 'To', 'While', 'Break', 'Continue', 'If', 'Then', 'And', 'Or', '{', '}', ')', ']', '|', '<<', '+', '-', '*', '/', '%', literal",
			"expecting: 'Game', 'Screen', 'Valid', 'NextID', 'WinnerID', 'Shuffle', 'For', 'While', 'Break', 'Continue', 'If', 'Else', '}', '|', literal",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 4, 5, 6, 3, 5, 4, 7, 8, 8, 8, 8, 8, 6, 9, 10, 6, 6, 10, 11, 9, 8, 6, 12, 6, 6, 6, 13, 14, 6, 7, 4, 15, 16, 17, 17, 18, 10, 17, 19, 20, 19, 19, 17, 17, 17, 21, 22, 10, 10, 9, 10, 11, 6, 15, 4, 2, 10, 19, 23, 24, 24, 6, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 4, 8, 25, 25, 17, 26, 2, 27, 17, 19, 19, 28, 28, 28, 28, 28, 28, 17, 17, 17, 17, 17, 29, 8, 10, 4, 20, 6, 6, 6, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
