/* This file was generated by SableCC (http://www.sablecc.org/). */

package cardlang.node;

import cardlang.analysis.*;

@SuppressWarnings("nls")
public final class ASubscriptId extends PId
{
    private PId _id_;
    private TLeftsqr _leftsqr_;
    private PExpr _expr_;
    private TRightsqr _rightsqr_;

    public ASubscriptId()
    {
        // Constructor
    }

    public ASubscriptId(
        @SuppressWarnings("hiding") PId _id_,
        @SuppressWarnings("hiding") TLeftsqr _leftsqr_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TRightsqr _rightsqr_)
    {
        // Constructor
        setId(_id_);

        setLeftsqr(_leftsqr_);

        setExpr(_expr_);

        setRightsqr(_rightsqr_);

    }

    @Override
    public Object clone()
    {
        return new ASubscriptId(
            cloneNode(this._id_),
            cloneNode(this._leftsqr_),
            cloneNode(this._expr_),
            cloneNode(this._rightsqr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASubscriptId(this);
    }

    public PId getId()
    {
        return this._id_;
    }

    public void setId(PId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TLeftsqr getLeftsqr()
    {
        return this._leftsqr_;
    }

    public void setLeftsqr(TLeftsqr node)
    {
        if(this._leftsqr_ != null)
        {
            this._leftsqr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftsqr_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TRightsqr getRightsqr()
    {
        return this._rightsqr_;
    }

    public void setRightsqr(TRightsqr node)
    {
        if(this._rightsqr_ != null)
        {
            this._rightsqr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightsqr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._leftsqr_)
            + toString(this._expr_)
            + toString(this._rightsqr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._leftsqr_ == child)
        {
            this._leftsqr_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._rightsqr_ == child)
        {
            this._rightsqr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((PId) newChild);
            return;
        }

        if(this._leftsqr_ == oldChild)
        {
            setLeftsqr((TLeftsqr) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._rightsqr_ == oldChild)
        {
            setRightsqr((TRightsqr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
