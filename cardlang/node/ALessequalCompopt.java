/* This file was generated by SableCC (http://www.sablecc.org/). */

package cardlang.node;

import cardlang.analysis.*;

@SuppressWarnings("nls")
public final class ALessequalCompopt extends PCompopt
{
    private TOptlessequal _optlessequal_;

    public ALessequalCompopt()
    {
        // Constructor
    }

    public ALessequalCompopt(
        @SuppressWarnings("hiding") TOptlessequal _optlessequal_)
    {
        // Constructor
        setOptlessequal(_optlessequal_);

    }

    @Override
    public Object clone()
    {
        return new ALessequalCompopt(
            cloneNode(this._optlessequal_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALessequalCompopt(this);
    }

    public TOptlessequal getOptlessequal()
    {
        return this._optlessequal_;
    }

    public void setOptlessequal(TOptlessequal node)
    {
        if(this._optlessequal_ != null)
        {
            this._optlessequal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._optlessequal_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._optlessequal_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._optlessequal_ == child)
        {
            this._optlessequal_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._optlessequal_ == oldChild)
        {
            setOptlessequal((TOptlessequal) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
