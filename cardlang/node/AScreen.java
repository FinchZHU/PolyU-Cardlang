/* This file was generated by SableCC (http://www.sablecc.org/). */

package cardlang.node;

import cardlang.analysis.*;

@SuppressWarnings("nls")
public final class AScreen extends PScreen
{
    private TKwscreen _kwscreen_;
    private PStmtblock _stmtblock_;

    public AScreen()
    {
        // Constructor
    }

    public AScreen(
        @SuppressWarnings("hiding") TKwscreen _kwscreen_,
        @SuppressWarnings("hiding") PStmtblock _stmtblock_)
    {
        // Constructor
        setKwscreen(_kwscreen_);

        setStmtblock(_stmtblock_);

    }

    @Override
    public Object clone()
    {
        return new AScreen(
            cloneNode(this._kwscreen_),
            cloneNode(this._stmtblock_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAScreen(this);
    }

    public TKwscreen getKwscreen()
    {
        return this._kwscreen_;
    }

    public void setKwscreen(TKwscreen node)
    {
        if(this._kwscreen_ != null)
        {
            this._kwscreen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwscreen_ = node;
    }

    public PStmtblock getStmtblock()
    {
        return this._stmtblock_;
    }

    public void setStmtblock(PStmtblock node)
    {
        if(this._stmtblock_ != null)
        {
            this._stmtblock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stmtblock_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kwscreen_)
            + toString(this._stmtblock_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kwscreen_ == child)
        {
            this._kwscreen_ = null;
            return;
        }

        if(this._stmtblock_ == child)
        {
            this._stmtblock_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kwscreen_ == oldChild)
        {
            setKwscreen((TKwscreen) newChild);
            return;
        }

        if(this._stmtblock_ == oldChild)
        {
            setStmtblock((PStmtblock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
