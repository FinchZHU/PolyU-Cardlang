/* This file was generated by SableCC (http://www.sablecc.org/). */

package cardlang.node;

import cardlang.analysis.*;

@SuppressWarnings("nls")
public final class AFor extends PFor
{
    private TKwfor _kwfor_;
    private PId _id_;
    private TKwfrom _kwfrom_;
    private PExpr _from_;
    private TKwto _kwto_;
    private PExpr _to_;
    private PStmtblock _stmtblock_;

    public AFor()
    {
        // Constructor
    }

    public AFor(
        @SuppressWarnings("hiding") TKwfor _kwfor_,
        @SuppressWarnings("hiding") PId _id_,
        @SuppressWarnings("hiding") TKwfrom _kwfrom_,
        @SuppressWarnings("hiding") PExpr _from_,
        @SuppressWarnings("hiding") TKwto _kwto_,
        @SuppressWarnings("hiding") PExpr _to_,
        @SuppressWarnings("hiding") PStmtblock _stmtblock_)
    {
        // Constructor
        setKwfor(_kwfor_);

        setId(_id_);

        setKwfrom(_kwfrom_);

        setFrom(_from_);

        setKwto(_kwto_);

        setTo(_to_);

        setStmtblock(_stmtblock_);

    }

    @Override
    public Object clone()
    {
        return new AFor(
            cloneNode(this._kwfor_),
            cloneNode(this._id_),
            cloneNode(this._kwfrom_),
            cloneNode(this._from_),
            cloneNode(this._kwto_),
            cloneNode(this._to_),
            cloneNode(this._stmtblock_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFor(this);
    }

    public TKwfor getKwfor()
    {
        return this._kwfor_;
    }

    public void setKwfor(TKwfor node)
    {
        if(this._kwfor_ != null)
        {
            this._kwfor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwfor_ = node;
    }

    public PId getId()
    {
        return this._id_;
    }

    public void setId(PId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TKwfrom getKwfrom()
    {
        return this._kwfrom_;
    }

    public void setKwfrom(TKwfrom node)
    {
        if(this._kwfrom_ != null)
        {
            this._kwfrom_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwfrom_ = node;
    }

    public PExpr getFrom()
    {
        return this._from_;
    }

    public void setFrom(PExpr node)
    {
        if(this._from_ != null)
        {
            this._from_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._from_ = node;
    }

    public TKwto getKwto()
    {
        return this._kwto_;
    }

    public void setKwto(TKwto node)
    {
        if(this._kwto_ != null)
        {
            this._kwto_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwto_ = node;
    }

    public PExpr getTo()
    {
        return this._to_;
    }

    public void setTo(PExpr node)
    {
        if(this._to_ != null)
        {
            this._to_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._to_ = node;
    }

    public PStmtblock getStmtblock()
    {
        return this._stmtblock_;
    }

    public void setStmtblock(PStmtblock node)
    {
        if(this._stmtblock_ != null)
        {
            this._stmtblock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stmtblock_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kwfor_)
            + toString(this._id_)
            + toString(this._kwfrom_)
            + toString(this._from_)
            + toString(this._kwto_)
            + toString(this._to_)
            + toString(this._stmtblock_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kwfor_ == child)
        {
            this._kwfor_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._kwfrom_ == child)
        {
            this._kwfrom_ = null;
            return;
        }

        if(this._from_ == child)
        {
            this._from_ = null;
            return;
        }

        if(this._kwto_ == child)
        {
            this._kwto_ = null;
            return;
        }

        if(this._to_ == child)
        {
            this._to_ = null;
            return;
        }

        if(this._stmtblock_ == child)
        {
            this._stmtblock_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kwfor_ == oldChild)
        {
            setKwfor((TKwfor) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((PId) newChild);
            return;
        }

        if(this._kwfrom_ == oldChild)
        {
            setKwfrom((TKwfrom) newChild);
            return;
        }

        if(this._from_ == oldChild)
        {
            setFrom((PExpr) newChild);
            return;
        }

        if(this._kwto_ == oldChild)
        {
            setKwto((TKwto) newChild);
            return;
        }

        if(this._to_ == oldChild)
        {
            setTo((PExpr) newChild);
            return;
        }

        if(this._stmtblock_ == oldChild)
        {
            setStmtblock((PStmtblock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
