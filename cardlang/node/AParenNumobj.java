/* This file was generated by SableCC (http://www.sablecc.org/). */

package cardlang.node;

import cardlang.analysis.*;

@SuppressWarnings("nls")
public final class AParenNumobj extends PNumobj
{
    private TLeftparen _leftparen_;
    private PNumexpr _numexpr_;
    private TRightparen _rightparen_;

    public AParenNumobj()
    {
        // Constructor
    }

    public AParenNumobj(
        @SuppressWarnings("hiding") TLeftparen _leftparen_,
        @SuppressWarnings("hiding") PNumexpr _numexpr_,
        @SuppressWarnings("hiding") TRightparen _rightparen_)
    {
        // Constructor
        setLeftparen(_leftparen_);

        setNumexpr(_numexpr_);

        setRightparen(_rightparen_);

    }

    @Override
    public Object clone()
    {
        return new AParenNumobj(
            cloneNode(this._leftparen_),
            cloneNode(this._numexpr_),
            cloneNode(this._rightparen_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParenNumobj(this);
    }

    public TLeftparen getLeftparen()
    {
        return this._leftparen_;
    }

    public void setLeftparen(TLeftparen node)
    {
        if(this._leftparen_ != null)
        {
            this._leftparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftparen_ = node;
    }

    public PNumexpr getNumexpr()
    {
        return this._numexpr_;
    }

    public void setNumexpr(PNumexpr node)
    {
        if(this._numexpr_ != null)
        {
            this._numexpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._numexpr_ = node;
    }

    public TRightparen getRightparen()
    {
        return this._rightparen_;
    }

    public void setRightparen(TRightparen node)
    {
        if(this._rightparen_ != null)
        {
            this._rightparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightparen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._leftparen_)
            + toString(this._numexpr_)
            + toString(this._rightparen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._leftparen_ == child)
        {
            this._leftparen_ = null;
            return;
        }

        if(this._numexpr_ == child)
        {
            this._numexpr_ = null;
            return;
        }

        if(this._rightparen_ == child)
        {
            this._rightparen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._leftparen_ == oldChild)
        {
            setLeftparen((TLeftparen) newChild);
            return;
        }

        if(this._numexpr_ == oldChild)
        {
            setNumexpr((PNumexpr) newChild);
            return;
        }

        if(this._rightparen_ == oldChild)
        {
            setRightparen((TRightparen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
