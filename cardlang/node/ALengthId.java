/* This file was generated by SableCC (http://www.sablecc.org/). */

package cardlang.node;

import cardlang.analysis.*;

@SuppressWarnings("nls")
public final class ALengthId extends PId
{
    private TLine _lline_;
    private PObj _obj_;
    private TLine _rline_;

    public ALengthId()
    {
        // Constructor
    }

    public ALengthId(
        @SuppressWarnings("hiding") TLine _lline_,
        @SuppressWarnings("hiding") PObj _obj_,
        @SuppressWarnings("hiding") TLine _rline_)
    {
        // Constructor
        setLline(_lline_);

        setObj(_obj_);

        setRline(_rline_);

    }

    @Override
    public Object clone()
    {
        return new ALengthId(
            cloneNode(this._lline_),
            cloneNode(this._obj_),
            cloneNode(this._rline_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALengthId(this);
    }

    public TLine getLline()
    {
        return this._lline_;
    }

    public void setLline(TLine node)
    {
        if(this._lline_ != null)
        {
            this._lline_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lline_ = node;
    }

    public PObj getObj()
    {
        return this._obj_;
    }

    public void setObj(PObj node)
    {
        if(this._obj_ != null)
        {
            this._obj_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._obj_ = node;
    }

    public TLine getRline()
    {
        return this._rline_;
    }

    public void setRline(TLine node)
    {
        if(this._rline_ != null)
        {
            this._rline_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rline_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lline_)
            + toString(this._obj_)
            + toString(this._rline_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lline_ == child)
        {
            this._lline_ = null;
            return;
        }

        if(this._obj_ == child)
        {
            this._obj_ = null;
            return;
        }

        if(this._rline_ == child)
        {
            this._rline_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lline_ == oldChild)
        {
            setLline((TLine) newChild);
            return;
        }

        if(this._obj_ == oldChild)
        {
            setObj((PObj) newChild);
            return;
        }

        if(this._rline_ == oldChild)
        {
            setRline((TLine) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
