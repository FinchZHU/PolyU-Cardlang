/* This file was generated by SableCC (http://www.sablecc.org/). */

package cardlang.node;

import cardlang.analysis.*;

@SuppressWarnings("nls")
public final class ARecurNumexpr extends PNumexpr
{
    private PNumexpr _numexpr_;
    private PNumopt _numopt_;
    private PNumobj _numobj_;

    public ARecurNumexpr()
    {
        // Constructor
    }

    public ARecurNumexpr(
        @SuppressWarnings("hiding") PNumexpr _numexpr_,
        @SuppressWarnings("hiding") PNumopt _numopt_,
        @SuppressWarnings("hiding") PNumobj _numobj_)
    {
        // Constructor
        setNumexpr(_numexpr_);

        setNumopt(_numopt_);

        setNumobj(_numobj_);

    }

    @Override
    public Object clone()
    {
        return new ARecurNumexpr(
            cloneNode(this._numexpr_),
            cloneNode(this._numopt_),
            cloneNode(this._numobj_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARecurNumexpr(this);
    }

    public PNumexpr getNumexpr()
    {
        return this._numexpr_;
    }

    public void setNumexpr(PNumexpr node)
    {
        if(this._numexpr_ != null)
        {
            this._numexpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._numexpr_ = node;
    }

    public PNumopt getNumopt()
    {
        return this._numopt_;
    }

    public void setNumopt(PNumopt node)
    {
        if(this._numopt_ != null)
        {
            this._numopt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._numopt_ = node;
    }

    public PNumobj getNumobj()
    {
        return this._numobj_;
    }

    public void setNumobj(PNumobj node)
    {
        if(this._numobj_ != null)
        {
            this._numobj_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._numobj_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._numexpr_)
            + toString(this._numopt_)
            + toString(this._numobj_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._numexpr_ == child)
        {
            this._numexpr_ = null;
            return;
        }

        if(this._numopt_ == child)
        {
            this._numopt_ = null;
            return;
        }

        if(this._numobj_ == child)
        {
            this._numobj_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._numexpr_ == oldChild)
        {
            setNumexpr((PNumexpr) newChild);
            return;
        }

        if(this._numopt_ == oldChild)
        {
            setNumopt((PNumopt) newChild);
            return;
        }

        if(this._numobj_ == oldChild)
        {
            setNumobj((PNumobj) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
