/* This file was generated by SableCC (http://www.sablecc.org/). */

package cardlang.node;

import cardlang.analysis.*;

@SuppressWarnings("nls")
public final class ASubscript extends PSubscript
{
    private PObj _obj_;
    private TLeftsqr _leftsqr_;
    private PSubobj _subobj_;
    private TRightsqr _rightsqr_;

    public ASubscript()
    {
        // Constructor
    }

    public ASubscript(
        @SuppressWarnings("hiding") PObj _obj_,
        @SuppressWarnings("hiding") TLeftsqr _leftsqr_,
        @SuppressWarnings("hiding") PSubobj _subobj_,
        @SuppressWarnings("hiding") TRightsqr _rightsqr_)
    {
        // Constructor
        setObj(_obj_);

        setLeftsqr(_leftsqr_);

        setSubobj(_subobj_);

        setRightsqr(_rightsqr_);

    }

    @Override
    public Object clone()
    {
        return new ASubscript(
            cloneNode(this._obj_),
            cloneNode(this._leftsqr_),
            cloneNode(this._subobj_),
            cloneNode(this._rightsqr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASubscript(this);
    }

    public PObj getObj()
    {
        return this._obj_;
    }

    public void setObj(PObj node)
    {
        if(this._obj_ != null)
        {
            this._obj_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._obj_ = node;
    }

    public TLeftsqr getLeftsqr()
    {
        return this._leftsqr_;
    }

    public void setLeftsqr(TLeftsqr node)
    {
        if(this._leftsqr_ != null)
        {
            this._leftsqr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftsqr_ = node;
    }

    public PSubobj getSubobj()
    {
        return this._subobj_;
    }

    public void setSubobj(PSubobj node)
    {
        if(this._subobj_ != null)
        {
            this._subobj_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._subobj_ = node;
    }

    public TRightsqr getRightsqr()
    {
        return this._rightsqr_;
    }

    public void setRightsqr(TRightsqr node)
    {
        if(this._rightsqr_ != null)
        {
            this._rightsqr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightsqr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._obj_)
            + toString(this._leftsqr_)
            + toString(this._subobj_)
            + toString(this._rightsqr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._obj_ == child)
        {
            this._obj_ = null;
            return;
        }

        if(this._leftsqr_ == child)
        {
            this._leftsqr_ = null;
            return;
        }

        if(this._subobj_ == child)
        {
            this._subobj_ = null;
            return;
        }

        if(this._rightsqr_ == child)
        {
            this._rightsqr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._obj_ == oldChild)
        {
            setObj((PObj) newChild);
            return;
        }

        if(this._leftsqr_ == oldChild)
        {
            setLeftsqr((TLeftsqr) newChild);
            return;
        }

        if(this._subobj_ == oldChild)
        {
            setSubobj((PSubobj) newChild);
            return;
        }

        if(this._rightsqr_ == oldChild)
        {
            setRightsqr((TRightsqr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
