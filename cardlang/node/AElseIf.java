/* This file was generated by SableCC (http://www.sablecc.org/). */

package cardlang.node;

import cardlang.analysis.*;

@SuppressWarnings("nls")
public final class AElseIf extends PIf
{
    private TKwif _kwif_;
    private PExpr _expr_;
    private TKwthen _kwthen_;
    private PStmtblock _stmtblock_;
    private TKwelse _kwelse_;
    private PElsestmtblock _elsestmtblock_;

    public AElseIf()
    {
        // Constructor
    }

    public AElseIf(
        @SuppressWarnings("hiding") TKwif _kwif_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TKwthen _kwthen_,
        @SuppressWarnings("hiding") PStmtblock _stmtblock_,
        @SuppressWarnings("hiding") TKwelse _kwelse_,
        @SuppressWarnings("hiding") PElsestmtblock _elsestmtblock_)
    {
        // Constructor
        setKwif(_kwif_);

        setExpr(_expr_);

        setKwthen(_kwthen_);

        setStmtblock(_stmtblock_);

        setKwelse(_kwelse_);

        setElsestmtblock(_elsestmtblock_);

    }

    @Override
    public Object clone()
    {
        return new AElseIf(
            cloneNode(this._kwif_),
            cloneNode(this._expr_),
            cloneNode(this._kwthen_),
            cloneNode(this._stmtblock_),
            cloneNode(this._kwelse_),
            cloneNode(this._elsestmtblock_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAElseIf(this);
    }

    public TKwif getKwif()
    {
        return this._kwif_;
    }

    public void setKwif(TKwif node)
    {
        if(this._kwif_ != null)
        {
            this._kwif_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwif_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TKwthen getKwthen()
    {
        return this._kwthen_;
    }

    public void setKwthen(TKwthen node)
    {
        if(this._kwthen_ != null)
        {
            this._kwthen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwthen_ = node;
    }

    public PStmtblock getStmtblock()
    {
        return this._stmtblock_;
    }

    public void setStmtblock(PStmtblock node)
    {
        if(this._stmtblock_ != null)
        {
            this._stmtblock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._stmtblock_ = node;
    }

    public TKwelse getKwelse()
    {
        return this._kwelse_;
    }

    public void setKwelse(TKwelse node)
    {
        if(this._kwelse_ != null)
        {
            this._kwelse_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kwelse_ = node;
    }

    public PElsestmtblock getElsestmtblock()
    {
        return this._elsestmtblock_;
    }

    public void setElsestmtblock(PElsestmtblock node)
    {
        if(this._elsestmtblock_ != null)
        {
            this._elsestmtblock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elsestmtblock_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kwif_)
            + toString(this._expr_)
            + toString(this._kwthen_)
            + toString(this._stmtblock_)
            + toString(this._kwelse_)
            + toString(this._elsestmtblock_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kwif_ == child)
        {
            this._kwif_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._kwthen_ == child)
        {
            this._kwthen_ = null;
            return;
        }

        if(this._stmtblock_ == child)
        {
            this._stmtblock_ = null;
            return;
        }

        if(this._kwelse_ == child)
        {
            this._kwelse_ = null;
            return;
        }

        if(this._elsestmtblock_ == child)
        {
            this._elsestmtblock_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kwif_ == oldChild)
        {
            setKwif((TKwif) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._kwthen_ == oldChild)
        {
            setKwthen((TKwthen) newChild);
            return;
        }

        if(this._stmtblock_ == oldChild)
        {
            setStmtblock((PStmtblock) newChild);
            return;
        }

        if(this._kwelse_ == oldChild)
        {
            setKwelse((TKwelse) newChild);
            return;
        }

        if(this._elsestmtblock_ == oldChild)
        {
            setElsestmtblock((PElsestmtblock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
