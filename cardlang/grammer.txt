Package cardlang;

Helpers
    letter = ['a'..'z'] | ['A'..'Z'];
    digit = ['0'..'9'];
    symbol = [32..33] | [35..126];
    quotemark = '"';

Tokens
    kwgame = 'Game';
    kwscreen = 'Screen';
    kwvalid = 'Valid';
    kwnextid = 'NextID';
    kwwinnerid = 'WinnerID';
    kwshuffle = 'Shuffle';
    kwfor = 'For';
    kwfrom = 'From';
    kwto = 'To';
    kwwhile = 'While';
    kwbreak = 'Break';
    kwcontinue = 'Continue';
    kwif = 'If';
    kwthen = 'Then';
    kwelse = 'Else';
    kwtrue = 'True';
    kwfalse = 'False';
    kwnot = 'Not';
    kwand = 'And';
    kwor = 'Or';

    leftbrace = '{';
    rightbrace = '}';
    leftparen = '(';
    rightparen = ')';
    point = '.';
    leftsqr = '[';
    rightsqr = ']';
    line = '|';

    optshift = '<<';
    optlargerequal = '>=';
    optlessequal = '<=';
    optinequal = '<>';
    optlarger = '>';
    optless = '<';
    optequal = '=';
    optplus = '+';
    optminus = '-';
    optmulti = '*';
    optdiv = '/';
    optmod = '%';

    literal = letter+ (letter | digit)*;
    numeral = digit+;
    string = quotemark symbol* quotemark;
    blank = (' ' | 13 | 10 | 9)+;

Ignored Tokens
    blank;

Productions
    program = game screen valid winnerid nextid;
    game = kwgame literal stmtblock;
    screen = kwscreen stmtblock;
    valid = kwvalid stmtblock;
    nextid = kwnextid stmtblock;
    winnerid = kwwinnerid stmtblock;

    stmtblock = leftbrace stmt* rightbrace;

    stmt = {shuffle} kwshuffle | {shift} shift | {for} for | {while} while | {if} if | {break} kwbreak | {continue} kwcontinue;

    shift = {base} obj optshift expr | {recur} shift optshift expr;

    for = kwfor id kwfrom [from]:expr kwto [to]:expr stmtblock;

    while = kwwhile expr stmtblock;

    if = {single} kwif expr kwthen stmtblock | {else} kwif expr kwthen stmtblock kwelse elsestmtblock;
    elsestmtblock = stmtblock;

    expr = {base} factor | {string} string | {and} expr kwand factor | {or} expr kwor factor;
    factor = {base} compexpr | {not} kwnot compexpr;

    compexpr = {base} numexpr | {larger} [lexpr]:numexpr optlarger [rexpr]:numexpr | {largerequal} [lexpr]:numexpr optlargerequal [rexpr]:numexpr | {less} [lexpr]:numexpr optless [rexpr]:numexpr | {lessequal} [lexpr]:numexpr optlessequal [rexpr]:numexpr | {equal} [lexpr]:numexpr optequal [rexpr]:numexpr | {inequal} [lexpr]:numexpr optinequal [rexpr]:numexpr;

    numexpr = {base} val | {plus} numexpr optplus val | {minus} numexpr optminus val | {multi} numexpr optmulti val | {div} numexpr optdiv val | {mod} numexpr optmod val;
    val = {obj} obj | {num} numeral | {true} kwtrue | {false} kwfalse | {paren} leftparen expr rightparen;

    obj = {id} id | {field} id point obj;
    id = {lit} literal | {game} kwgame | {screen} kwscreen | {valid} kwvalid | {winnerid} kwwinnerid | {nextid} kwnextid | {subscript} id leftsqr expr rightsqr | {length} [lline]:line obj [rline]:line;