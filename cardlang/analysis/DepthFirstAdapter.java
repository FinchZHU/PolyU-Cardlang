/* This file was generated by SableCC (http://www.sablecc.org/). */

package cardlang.analysis;

import java.util.*;
import cardlang.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getGame() != null)
        {
            node.getGame().apply(this);
        }
        if(node.getScreen() != null)
        {
            node.getScreen().apply(this);
        }
        if(node.getValid() != null)
        {
            node.getValid().apply(this);
        }
        if(node.getWinnerid() != null)
        {
            node.getWinnerid().apply(this);
        }
        if(node.getNextid() != null)
        {
            node.getNextid().apply(this);
        }
        outAProgram(node);
    }

    public void inAGame(AGame node)
    {
        defaultIn(node);
    }

    public void outAGame(AGame node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGame(AGame node)
    {
        inAGame(node);
        if(node.getKwgame() != null)
        {
            node.getKwgame().apply(this);
        }
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        if(node.getStmtblock() != null)
        {
            node.getStmtblock().apply(this);
        }
        outAGame(node);
    }

    public void inAScreen(AScreen node)
    {
        defaultIn(node);
    }

    public void outAScreen(AScreen node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScreen(AScreen node)
    {
        inAScreen(node);
        if(node.getKwscreen() != null)
        {
            node.getKwscreen().apply(this);
        }
        if(node.getStmtblock() != null)
        {
            node.getStmtblock().apply(this);
        }
        outAScreen(node);
    }

    public void inAValid(AValid node)
    {
        defaultIn(node);
    }

    public void outAValid(AValid node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValid(AValid node)
    {
        inAValid(node);
        if(node.getKwvalid() != null)
        {
            node.getKwvalid().apply(this);
        }
        if(node.getStmtblock() != null)
        {
            node.getStmtblock().apply(this);
        }
        outAValid(node);
    }

    public void inANextid(ANextid node)
    {
        defaultIn(node);
    }

    public void outANextid(ANextid node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANextid(ANextid node)
    {
        inANextid(node);
        if(node.getKwnextid() != null)
        {
            node.getKwnextid().apply(this);
        }
        if(node.getStmtblock() != null)
        {
            node.getStmtblock().apply(this);
        }
        outANextid(node);
    }

    public void inAWinnerid(AWinnerid node)
    {
        defaultIn(node);
    }

    public void outAWinnerid(AWinnerid node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWinnerid(AWinnerid node)
    {
        inAWinnerid(node);
        if(node.getKwwinnerid() != null)
        {
            node.getKwwinnerid().apply(this);
        }
        if(node.getStmtblock() != null)
        {
            node.getStmtblock().apply(this);
        }
        outAWinnerid(node);
    }

    public void inAStmtblock(AStmtblock node)
    {
        defaultIn(node);
    }

    public void outAStmtblock(AStmtblock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtblock(AStmtblock node)
    {
        inAStmtblock(node);
        if(node.getLeftbrace() != null)
        {
            node.getLeftbrace().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRightbrace() != null)
        {
            node.getRightbrace().apply(this);
        }
        outAStmtblock(node);
    }

    public void inAShuffleStmt(AShuffleStmt node)
    {
        defaultIn(node);
    }

    public void outAShuffleStmt(AShuffleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShuffleStmt(AShuffleStmt node)
    {
        inAShuffleStmt(node);
        if(node.getKwshuffle() != null)
        {
            node.getKwshuffle().apply(this);
        }
        outAShuffleStmt(node);
    }

    public void inAShiftStmt(AShiftStmt node)
    {
        defaultIn(node);
    }

    public void outAShiftStmt(AShiftStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShiftStmt(AShiftStmt node)
    {
        inAShiftStmt(node);
        if(node.getShift() != null)
        {
            node.getShift().apply(this);
        }
        outAShiftStmt(node);
    }

    public void inAForStmt(AForStmt node)
    {
        defaultIn(node);
    }

    public void outAForStmt(AForStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAForStmt(AForStmt node)
    {
        inAForStmt(node);
        if(node.getFor() != null)
        {
            node.getFor().apply(this);
        }
        outAForStmt(node);
    }

    public void inAWhileStmt(AWhileStmt node)
    {
        defaultIn(node);
    }

    public void outAWhileStmt(AWhileStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmt(AWhileStmt node)
    {
        inAWhileStmt(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAWhileStmt(node);
    }

    public void inAIfStmt(AIfStmt node)
    {
        defaultIn(node);
    }

    public void outAIfStmt(AIfStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        inAIfStmt(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfStmt(node);
    }

    public void inABreakStmt(ABreakStmt node)
    {
        defaultIn(node);
    }

    public void outABreakStmt(ABreakStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABreakStmt(ABreakStmt node)
    {
        inABreakStmt(node);
        if(node.getKwbreak() != null)
        {
            node.getKwbreak().apply(this);
        }
        outABreakStmt(node);
    }

    public void inAContinueStmt(AContinueStmt node)
    {
        defaultIn(node);
    }

    public void outAContinueStmt(AContinueStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAContinueStmt(AContinueStmt node)
    {
        inAContinueStmt(node);
        if(node.getKwcontinue() != null)
        {
            node.getKwcontinue().apply(this);
        }
        outAContinueStmt(node);
    }

    public void inABaseShift(ABaseShift node)
    {
        defaultIn(node);
    }

    public void outABaseShift(ABaseShift node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABaseShift(ABaseShift node)
    {
        inABaseShift(node);
        if(node.getObj() != null)
        {
            node.getObj().apply(this);
        }
        if(node.getOptshift() != null)
        {
            node.getOptshift().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outABaseShift(node);
    }

    public void inARecurShift(ARecurShift node)
    {
        defaultIn(node);
    }

    public void outARecurShift(ARecurShift node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARecurShift(ARecurShift node)
    {
        inARecurShift(node);
        if(node.getShift() != null)
        {
            node.getShift().apply(this);
        }
        if(node.getOptshift() != null)
        {
            node.getOptshift().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outARecurShift(node);
    }

    public void inAFor(AFor node)
    {
        defaultIn(node);
    }

    public void outAFor(AFor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFor(AFor node)
    {
        inAFor(node);
        if(node.getKwfor() != null)
        {
            node.getKwfor().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getKwfrom() != null)
        {
            node.getKwfrom().apply(this);
        }
        if(node.getFrom() != null)
        {
            node.getFrom().apply(this);
        }
        if(node.getKwto() != null)
        {
            node.getKwto().apply(this);
        }
        if(node.getTo() != null)
        {
            node.getTo().apply(this);
        }
        if(node.getStmtblock() != null)
        {
            node.getStmtblock().apply(this);
        }
        outAFor(node);
    }

    public void inAWhile(AWhile node)
    {
        defaultIn(node);
    }

    public void outAWhile(AWhile node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhile(AWhile node)
    {
        inAWhile(node);
        if(node.getKwwhile() != null)
        {
            node.getKwwhile().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getStmtblock() != null)
        {
            node.getStmtblock().apply(this);
        }
        outAWhile(node);
    }

    public void inASingleIf(ASingleIf node)
    {
        defaultIn(node);
    }

    public void outASingleIf(ASingleIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleIf(ASingleIf node)
    {
        inASingleIf(node);
        if(node.getKwif() != null)
        {
            node.getKwif().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getKwthen() != null)
        {
            node.getKwthen().apply(this);
        }
        if(node.getStmtblock() != null)
        {
            node.getStmtblock().apply(this);
        }
        outASingleIf(node);
    }

    public void inAElseIf(AElseIf node)
    {
        defaultIn(node);
    }

    public void outAElseIf(AElseIf node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElseIf(AElseIf node)
    {
        inAElseIf(node);
        if(node.getKwif() != null)
        {
            node.getKwif().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getKwthen() != null)
        {
            node.getKwthen().apply(this);
        }
        if(node.getStmtblock() != null)
        {
            node.getStmtblock().apply(this);
        }
        if(node.getKwelse() != null)
        {
            node.getKwelse().apply(this);
        }
        if(node.getElsestmtblock() != null)
        {
            node.getElsestmtblock().apply(this);
        }
        outAElseIf(node);
    }

    public void inAElsestmtblock(AElsestmtblock node)
    {
        defaultIn(node);
    }

    public void outAElsestmtblock(AElsestmtblock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElsestmtblock(AElsestmtblock node)
    {
        inAElsestmtblock(node);
        if(node.getStmtblock() != null)
        {
            node.getStmtblock().apply(this);
        }
        outAElsestmtblock(node);
    }

    public void inABaseExpr(ABaseExpr node)
    {
        defaultIn(node);
    }

    public void outABaseExpr(ABaseExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABaseExpr(ABaseExpr node)
    {
        inABaseExpr(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outABaseExpr(node);
    }

    public void inAAndExpr(AAndExpr node)
    {
        defaultIn(node);
    }

    public void outAAndExpr(AAndExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExpr(AAndExpr node)
    {
        inAAndExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getKwand() != null)
        {
            node.getKwand().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAAndExpr(node);
    }

    public void inAOrExpr(AOrExpr node)
    {
        defaultIn(node);
    }

    public void outAOrExpr(AOrExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExpr(AOrExpr node)
    {
        inAOrExpr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getKwor() != null)
        {
            node.getKwor().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAOrExpr(node);
    }

    public void inABaseFactor(ABaseFactor node)
    {
        defaultIn(node);
    }

    public void outABaseFactor(ABaseFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABaseFactor(ABaseFactor node)
    {
        inABaseFactor(node);
        if(node.getCompexpr() != null)
        {
            node.getCompexpr().apply(this);
        }
        outABaseFactor(node);
    }

    public void inANotFactor(ANotFactor node)
    {
        defaultIn(node);
    }

    public void outANotFactor(ANotFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotFactor(ANotFactor node)
    {
        inANotFactor(node);
        if(node.getKwnot() != null)
        {
            node.getKwnot().apply(this);
        }
        if(node.getCompexpr() != null)
        {
            node.getCompexpr().apply(this);
        }
        outANotFactor(node);
    }

    public void inABaseCompexpr(ABaseCompexpr node)
    {
        defaultIn(node);
    }

    public void outABaseCompexpr(ABaseCompexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABaseCompexpr(ABaseCompexpr node)
    {
        inABaseCompexpr(node);
        if(node.getNumexpr() != null)
        {
            node.getNumexpr().apply(this);
        }
        outABaseCompexpr(node);
    }

    public void inALargerCompexpr(ALargerCompexpr node)
    {
        defaultIn(node);
    }

    public void outALargerCompexpr(ALargerCompexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALargerCompexpr(ALargerCompexpr node)
    {
        inALargerCompexpr(node);
        if(node.getLexpr() != null)
        {
            node.getLexpr().apply(this);
        }
        if(node.getOptlarger() != null)
        {
            node.getOptlarger().apply(this);
        }
        if(node.getRexpr() != null)
        {
            node.getRexpr().apply(this);
        }
        outALargerCompexpr(node);
    }

    public void inALargerequalCompexpr(ALargerequalCompexpr node)
    {
        defaultIn(node);
    }

    public void outALargerequalCompexpr(ALargerequalCompexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALargerequalCompexpr(ALargerequalCompexpr node)
    {
        inALargerequalCompexpr(node);
        if(node.getLexpr() != null)
        {
            node.getLexpr().apply(this);
        }
        if(node.getOptlargerequal() != null)
        {
            node.getOptlargerequal().apply(this);
        }
        if(node.getRexpr() != null)
        {
            node.getRexpr().apply(this);
        }
        outALargerequalCompexpr(node);
    }

    public void inALessCompexpr(ALessCompexpr node)
    {
        defaultIn(node);
    }

    public void outALessCompexpr(ALessCompexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessCompexpr(ALessCompexpr node)
    {
        inALessCompexpr(node);
        if(node.getLexpr() != null)
        {
            node.getLexpr().apply(this);
        }
        if(node.getOptless() != null)
        {
            node.getOptless().apply(this);
        }
        if(node.getRexpr() != null)
        {
            node.getRexpr().apply(this);
        }
        outALessCompexpr(node);
    }

    public void inALessequalCompexpr(ALessequalCompexpr node)
    {
        defaultIn(node);
    }

    public void outALessequalCompexpr(ALessequalCompexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessequalCompexpr(ALessequalCompexpr node)
    {
        inALessequalCompexpr(node);
        if(node.getLexpr() != null)
        {
            node.getLexpr().apply(this);
        }
        if(node.getOptlessequal() != null)
        {
            node.getOptlessequal().apply(this);
        }
        if(node.getRexpr() != null)
        {
            node.getRexpr().apply(this);
        }
        outALessequalCompexpr(node);
    }

    public void inAEqualCompexpr(AEqualCompexpr node)
    {
        defaultIn(node);
    }

    public void outAEqualCompexpr(AEqualCompexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualCompexpr(AEqualCompexpr node)
    {
        inAEqualCompexpr(node);
        if(node.getLexpr() != null)
        {
            node.getLexpr().apply(this);
        }
        if(node.getOptequal() != null)
        {
            node.getOptequal().apply(this);
        }
        if(node.getRexpr() != null)
        {
            node.getRexpr().apply(this);
        }
        outAEqualCompexpr(node);
    }

    public void inAInequalCompexpr(AInequalCompexpr node)
    {
        defaultIn(node);
    }

    public void outAInequalCompexpr(AInequalCompexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInequalCompexpr(AInequalCompexpr node)
    {
        inAInequalCompexpr(node);
        if(node.getLexpr() != null)
        {
            node.getLexpr().apply(this);
        }
        if(node.getOptinequal() != null)
        {
            node.getOptinequal().apply(this);
        }
        if(node.getRexpr() != null)
        {
            node.getRexpr().apply(this);
        }
        outAInequalCompexpr(node);
    }

    public void inABaseNumexpr(ABaseNumexpr node)
    {
        defaultIn(node);
    }

    public void outABaseNumexpr(ABaseNumexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABaseNumexpr(ABaseNumexpr node)
    {
        inABaseNumexpr(node);
        if(node.getVal() != null)
        {
            node.getVal().apply(this);
        }
        outABaseNumexpr(node);
    }

    public void inAPlusNumexpr(APlusNumexpr node)
    {
        defaultIn(node);
    }

    public void outAPlusNumexpr(APlusNumexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusNumexpr(APlusNumexpr node)
    {
        inAPlusNumexpr(node);
        if(node.getNumexpr() != null)
        {
            node.getNumexpr().apply(this);
        }
        if(node.getOptplus() != null)
        {
            node.getOptplus().apply(this);
        }
        if(node.getVal() != null)
        {
            node.getVal().apply(this);
        }
        outAPlusNumexpr(node);
    }

    public void inAMinusNumexpr(AMinusNumexpr node)
    {
        defaultIn(node);
    }

    public void outAMinusNumexpr(AMinusNumexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusNumexpr(AMinusNumexpr node)
    {
        inAMinusNumexpr(node);
        if(node.getNumexpr() != null)
        {
            node.getNumexpr().apply(this);
        }
        if(node.getOptminus() != null)
        {
            node.getOptminus().apply(this);
        }
        if(node.getVal() != null)
        {
            node.getVal().apply(this);
        }
        outAMinusNumexpr(node);
    }

    public void inAMultiNumexpr(AMultiNumexpr node)
    {
        defaultIn(node);
    }

    public void outAMultiNumexpr(AMultiNumexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiNumexpr(AMultiNumexpr node)
    {
        inAMultiNumexpr(node);
        if(node.getNumexpr() != null)
        {
            node.getNumexpr().apply(this);
        }
        if(node.getOptmulti() != null)
        {
            node.getOptmulti().apply(this);
        }
        if(node.getVal() != null)
        {
            node.getVal().apply(this);
        }
        outAMultiNumexpr(node);
    }

    public void inADivNumexpr(ADivNumexpr node)
    {
        defaultIn(node);
    }

    public void outADivNumexpr(ADivNumexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivNumexpr(ADivNumexpr node)
    {
        inADivNumexpr(node);
        if(node.getNumexpr() != null)
        {
            node.getNumexpr().apply(this);
        }
        if(node.getOptdiv() != null)
        {
            node.getOptdiv().apply(this);
        }
        if(node.getVal() != null)
        {
            node.getVal().apply(this);
        }
        outADivNumexpr(node);
    }

    public void inAModNumexpr(AModNumexpr node)
    {
        defaultIn(node);
    }

    public void outAModNumexpr(AModNumexpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModNumexpr(AModNumexpr node)
    {
        inAModNumexpr(node);
        if(node.getNumexpr() != null)
        {
            node.getNumexpr().apply(this);
        }
        if(node.getOptmod() != null)
        {
            node.getOptmod().apply(this);
        }
        if(node.getVal() != null)
        {
            node.getVal().apply(this);
        }
        outAModNumexpr(node);
    }

    public void inAObjVal(AObjVal node)
    {
        defaultIn(node);
    }

    public void outAObjVal(AObjVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAObjVal(AObjVal node)
    {
        inAObjVal(node);
        if(node.getObj() != null)
        {
            node.getObj().apply(this);
        }
        outAObjVal(node);
    }

    public void inANumVal(ANumVal node)
    {
        defaultIn(node);
    }

    public void outANumVal(ANumVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumVal(ANumVal node)
    {
        inANumVal(node);
        if(node.getNumeral() != null)
        {
            node.getNumeral().apply(this);
        }
        outANumVal(node);
    }

    public void inAStringVal(AStringVal node)
    {
        defaultIn(node);
    }

    public void outAStringVal(AStringVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringVal(AStringVal node)
    {
        inAStringVal(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringVal(node);
    }

    public void inATrueVal(ATrueVal node)
    {
        defaultIn(node);
    }

    public void outATrueVal(ATrueVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueVal(ATrueVal node)
    {
        inATrueVal(node);
        if(node.getKwtrue() != null)
        {
            node.getKwtrue().apply(this);
        }
        outATrueVal(node);
    }

    public void inAFalseVal(AFalseVal node)
    {
        defaultIn(node);
    }

    public void outAFalseVal(AFalseVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseVal(AFalseVal node)
    {
        inAFalseVal(node);
        if(node.getKwfalse() != null)
        {
            node.getKwfalse().apply(this);
        }
        outAFalseVal(node);
    }

    public void inAParenVal(AParenVal node)
    {
        defaultIn(node);
    }

    public void outAParenVal(AParenVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenVal(AParenVal node)
    {
        inAParenVal(node);
        if(node.getLeftparen() != null)
        {
            node.getLeftparen().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRightparen() != null)
        {
            node.getRightparen().apply(this);
        }
        outAParenVal(node);
    }

    public void inAIdObj(AIdObj node)
    {
        defaultIn(node);
    }

    public void outAIdObj(AIdObj node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdObj(AIdObj node)
    {
        inAIdObj(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdObj(node);
    }

    public void inAFieldObj(AFieldObj node)
    {
        defaultIn(node);
    }

    public void outAFieldObj(AFieldObj node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFieldObj(AFieldObj node)
    {
        inAFieldObj(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPoint() != null)
        {
            node.getPoint().apply(this);
        }
        if(node.getObj() != null)
        {
            node.getObj().apply(this);
        }
        outAFieldObj(node);
    }

    public void inALitId(ALitId node)
    {
        defaultIn(node);
    }

    public void outALitId(ALitId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALitId(ALitId node)
    {
        inALitId(node);
        if(node.getLiteral() != null)
        {
            node.getLiteral().apply(this);
        }
        outALitId(node);
    }

    public void inAGameId(AGameId node)
    {
        defaultIn(node);
    }

    public void outAGameId(AGameId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGameId(AGameId node)
    {
        inAGameId(node);
        if(node.getKwgame() != null)
        {
            node.getKwgame().apply(this);
        }
        outAGameId(node);
    }

    public void inAScreenId(AScreenId node)
    {
        defaultIn(node);
    }

    public void outAScreenId(AScreenId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAScreenId(AScreenId node)
    {
        inAScreenId(node);
        if(node.getKwscreen() != null)
        {
            node.getKwscreen().apply(this);
        }
        outAScreenId(node);
    }

    public void inAValidId(AValidId node)
    {
        defaultIn(node);
    }

    public void outAValidId(AValidId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValidId(AValidId node)
    {
        inAValidId(node);
        if(node.getKwvalid() != null)
        {
            node.getKwvalid().apply(this);
        }
        outAValidId(node);
    }

    public void inAWinneridId(AWinneridId node)
    {
        defaultIn(node);
    }

    public void outAWinneridId(AWinneridId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWinneridId(AWinneridId node)
    {
        inAWinneridId(node);
        if(node.getKwwinnerid() != null)
        {
            node.getKwwinnerid().apply(this);
        }
        outAWinneridId(node);
    }

    public void inANextidId(ANextidId node)
    {
        defaultIn(node);
    }

    public void outANextidId(ANextidId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANextidId(ANextidId node)
    {
        inANextidId(node);
        if(node.getKwnextid() != null)
        {
            node.getKwnextid().apply(this);
        }
        outANextidId(node);
    }

    public void inASubscriptId(ASubscriptId node)
    {
        defaultIn(node);
    }

    public void outASubscriptId(ASubscriptId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubscriptId(ASubscriptId node)
    {
        inASubscriptId(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getLeftsqr() != null)
        {
            node.getLeftsqr().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRightsqr() != null)
        {
            node.getRightsqr().apply(this);
        }
        outASubscriptId(node);
    }

    public void inALengthId(ALengthId node)
    {
        defaultIn(node);
    }

    public void outALengthId(ALengthId node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALengthId(ALengthId node)
    {
        inALengthId(node);
        if(node.getLline() != null)
        {
            node.getLline().apply(this);
        }
        if(node.getObj() != null)
        {
            node.getObj().apply(this);
        }
        if(node.getRline() != null)
        {
            node.getRline().apply(this);
        }
        outALengthId(node);
    }
}
