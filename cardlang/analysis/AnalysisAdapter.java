/* This file was generated by SableCC (http://www.sablecc.org/). */

package cardlang.analysis;

import java.util.*;
import cardlang.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGame(AGame node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAScreen(AScreen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAValid(AValid node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANextid(ANextid node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWinnerid(AWinnerid node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStmtblock(AStmtblock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAShuffleStmt(AShuffleStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAShiftStmt(AShiftStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAForStmt(AForStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhileStmt(AWhileStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIfStmt(AIfStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABreakStmt(ABreakStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAContinueStmt(AContinueStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABaseShift(ABaseShift node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARecurShift(ARecurShift node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFor(AFor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWhile(AWhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleIf(ASingleIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElseIf(AElseIf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElsestmtblock(AElsestmtblock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABaseExpr(ABaseExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAStringExpr(AStringExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndExpr(AAndExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrExpr(AOrExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABaseFactor(ABaseFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotFactor(ANotFactor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABaseCompexpr(ABaseCompexpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALargerCompexpr(ALargerCompexpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALargerequalCompexpr(ALargerequalCompexpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessCompexpr(ALessCompexpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALessequalCompexpr(ALessequalCompexpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEqualCompexpr(AEqualCompexpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInequalCompexpr(AInequalCompexpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABaseNumexpr(ABaseNumexpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusNumexpr(APlusNumexpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMinusNumexpr(AMinusNumexpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiNumexpr(AMultiNumexpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivNumexpr(ADivNumexpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAModNumexpr(AModNumexpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAObjVal(AObjVal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumVal(ANumVal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATrueVal(ATrueVal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFalseVal(AFalseVal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParenVal(AParenVal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdObj(AIdObj node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFieldObj(AFieldObj node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALitId(ALitId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAGameId(AGameId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAScreenId(AScreenId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAValidId(AValidId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAWinneridId(AWinneridId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANextidId(ANextidId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASubscriptId(ASubscriptId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALengthId(ALengthId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwgame(TKwgame node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwscreen(TKwscreen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwvalid(TKwvalid node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwnextid(TKwnextid node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwwinnerid(TKwwinnerid node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwshuffle(TKwshuffle node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwfor(TKwfor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwfrom(TKwfrom node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwto(TKwto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwwhile(TKwwhile node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwbreak(TKwbreak node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwcontinue(TKwcontinue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwif(TKwif node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwthen(TKwthen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwelse(TKwelse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwtrue(TKwtrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwfalse(TKwfalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwnot(TKwnot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwand(TKwand node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTKwor(TKwor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftbrace(TLeftbrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightbrace(TRightbrace node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftparen(TLeftparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightparen(TRightparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPoint(TPoint node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLeftsqr(TLeftsqr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRightsqr(TRightsqr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLine(TLine node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOptshift(TOptshift node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOptlargerequal(TOptlargerequal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOptlessequal(TOptlessequal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOptinequal(TOptinequal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOptlarger(TOptlarger node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOptless(TOptless node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOptequal(TOptequal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOptplus(TOptplus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOptminus(TOptminus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOptmulti(TOptmulti node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOptdiv(TOptdiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOptmod(TOptmod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLiteral(TLiteral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumeral(TNumeral node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
